// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("UserPosts", fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id                     String           @id @default(cuid())
  name                   String
  type                   String
  description            String
  baseStats              Json
  foodEffect             String
  optionalIngredient     String?
  quicklinkToEffectsList String?
  ingredient1            String
  ingredient2            String
  ingredient3            String?
  ingredient4            String?
  baseSpoilageRate       String
  craftingStation        String
  rarity                 String
  image                  String?          @db.Text
  isComplete             Boolean          @default(false)
  locationType           String           // 'memetics' or 'worldMap'
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  createdBy              User             @relation("UserRecipes", fields: [createdById], references: [id])
  createdById            String
  foundBy                UserRecipe[]
  location               RecipeLocation?
  foundCount             Int              @default(0)
}

model RecipeLocation {
  id           String   @id @default(cuid())
  recipe       Recipe   @relation(fields: [recipeId], references: [id])
  recipeId     String   @unique
  coordinates  String?
  description  String?
  image1       String?
  image2       String?
  region       String?
  locationName String?
}

model UserRecipe {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String
  foundAt   DateTime @default(now())

  @@unique([userId, recipeId])
}

model Category {
  id    String     @id @default(cuid())
  name  String     @unique
  items BonusStat[]
}

model BonusStat {
  id         String   @id @default(cuid())
  name       String
  effect     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  order      Int

  @@unique([categoryId, order])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  roles         UserRole[]
  accounts      Account[]
  sessions      Session[]
  posts         Post[]         @relation("UserPosts")
  recipes       Recipe[]       @relation("UserRecipes")
  foundRecipes  UserRecipe[]
  ownedTables   Table[]        @relation("OwnedTables")
  playerTables  TablePlayer[]  @relation("PlayerTables")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  banned        Boolean        @default(false)
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  users       UserRole[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserRole {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedBy String?
  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
}

model AuditLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  userId       String
  username     String
  userRole     String
  action       String
  resourceType String?
  resourceId   String?
  details      Json?
  ipAddress    String?
  status       String?
  severity     String   @default("normal")
  createdAt    DateTime @default(now())
  archived     Boolean  @default(false)

  @@index([timestamp, userId, action, resourceType])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SiteTheme {
  id                    String   @id
  name                  String
  appearance            String
  accentColor           String
  grayColor             String
  primaryColor          String
  font                  String
  layout                String
  radius                String
  scaling               String
  panelBackground       String
  typographyScale       String   @default("100%")
  smokeSpeed            Float?
  smokeOpacity          Float?   @default(0.3)
  saturationAdjust      Float?
  lightnessAdjust       Float?
  spotlightIntensity    Float?
  spotlightDistance     Float?
  spotlightAngle        Float?
  spotlightPenumbra     Float?
  spotlightColor        String?
  spotlightEnabled      Boolean?
  webglLogoText         String
  webglLogoFontSize     Int
  webglLogoFontFamily   String
  webglLogoColor        String
  webglLogoAnimSpeed    Float
  webglLogoInterRadius  Int
  webglLargeText        String
  webglLargeFontSize    Int
  webglLargeFontFamily  String
  webglLargeColor       String
  webglLargeAnimSpeed   Float
  webglLargeInterRadius Int
  webglLargeChangeInterval Int
  updatedAt             DateTime @updatedAt
}

model TickerSettings {
  id           String   @id @default("singleton")
  speed        Int      @default(30)
  pauseOnHover Boolean  @default(true)
  spacing      Int      @default(0)
  maxItemsPerFeed Int   @default(5)
}

model RssFeed {
  id              String    @id @default(cuid())
  title           String?    
  url             String    @unique
  lastFetched     DateTime
  keywords        String[]
  showInTicker    Boolean   @default(true)
  iconUrl         String?
  type            FeedType  @default(generic)
  items           RssItem[]
  maxItemsOverall Int       @default(100)
}

enum FeedType {
  youtube
  twitter
  generic
}

model RssItem {
  id           String   @id @default(cuid())
  title        String
  link         String   @unique
  pubDate      DateTime
  description  String   @db.Text
  author       String
  feedId       String
  feed         RssFeed  @relation(fields: [feedId], references: [id], onDelete: Cascade)
  youtubeItem  YoutubeItem?
  twitterItem  TwitterItem?
}

model YoutubeItem {
  id           String  @id @default(cuid())
  rssItemId    String  @unique
  rssItem      RssItem @relation(fields: [rssItemId], references: [id], onDelete: Cascade)
  videoId      String
  channelId    String
  thumbnailUrl String
  viewCount    Int
  likeCount    Int?
  dislikeCount Int?
  commentCount Int?
  duration     String?
  tags         String[]
  categoryId   String?
}

model TwitterItem {
  id           String  @id @default(cuid())
  rssItemId    String  @unique
  rssItem      RssItem @relation(fields: [rssItemId], references: [id], onDelete: Cascade)
  tweetId      String
  username     String
  retweetCount Int
  likeCount    Int
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  color       String?
  memetics    Memetic[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tier {
  id       String    @id @default(cuid())
  tier     String    @unique
  color    String
  order    Int
  memetics Memetic[]

  @@unique([order])
}

model Memetic {
  id                  String                   @id @default(cuid())
  title               String
  description         String
  image               String?
  tier                Tier                      @relation(fields: [tierId], references: [id])
  tierId              String
  defaultRank         Int
  levelAssignments    Int[]
  tag                 Tag                       @relation(fields: [tagId], references: [id])
  tagId               String                    @default("Normal")
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @default(now())
  templateAssignments TemplateAssignment[]
  playerSelections    PlayerMemeticSelection[]
}

model Template {
  id           String              @id @default(cuid())
  name         String
  description  String?
  isPublished  Boolean             @default(false)
  order        Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  assignments  TemplateAssignment[]
  tables       Table[]
}

model TemplateAssignment {
  id         String    @id @default(cuid())
  template   Template  @relation(fields: [templateId], references: [id])
  templateId String
  memetic    Memetic   @relation(fields: [memeticId], references: [id])
  memeticId  String
  rank       Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@unique([templateId, memeticId])
}

model TablePlayer {
  id            String                   @id @default(cuid())
  table         Table                    @relation(fields: [tableId], references: [id])
  tableId       String
  user          User?                    @relation("PlayerTables", fields: [userId], references: [id])
  userId        String?
  name          String?
  canSelfManage Boolean                  @default(false)
  selections    PlayerMemeticSelection[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @default(now())

  @@unique([tableId, userId], map: "tableId_userId_unique")
  @@unique([tableId, name], map: "tableId_name_unique")
}

model Table {
  id           String         @id @default(cuid())
  name         String
  template     Template       @relation(fields: [templateId], references: [id])
  templateId   String
  owner        User           @relation("OwnedTables", fields: [ownerId], references: [id])
  ownerId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  players      TablePlayer[]
  publicLink   String?        @unique
  order        Int?
  isArchived   Boolean        @default(false)
  lastActivityAt DateTime     @default(now())
}

model PlayerMemeticSelection {
  id            String       @id @default(cuid())
  tablePlayer   TablePlayer  @relation(fields: [tablePlayerId], references: [id])
  tablePlayerId String
  memetic       Memetic      @relation(fields: [memeticId], references: [id])
  memeticId     String
  selectedAt    DateTime     @default(now())

  @@unique([tablePlayerId, memeticId])

  @@map(name: "PlayerMemeticSelection")
}