// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy   User   @relation("UserPosts", fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
    id                String   @id @default(cuid())
    name              String
    type              String
    description       String
    baseStats         Json
    foodEffect        String
    optionalIngredient String?
    quicklinkToEffectsList String?
    ingredient1       String
    ingredient2       String
    ingredient3       String?
    ingredient4       String?
    baseSpoilageRate  String
    craftingStation   String
    recipeLocation    String
    rarity            String
    image             String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         User     @relation("UserRecipes", fields: [createdById], references: [id])
    createdById       String
    foundBy           UserRecipe[]
    location          RecipeLocation?
}

model RecipeLocation {
    id          String   @id @default(cuid())
    recipe      Recipe   @relation(fields: [recipeId], references: [id])
    recipeId    String   @unique
    coordinates String
    description String
    image       String?
}

model UserRecipe {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    recipe    Recipe   @relation(fields: [recipeId], references: [id])
    recipeId  String
    foundAt   DateTime @default(now())

    @@unique([userId, recipeId])
}

model BonusStat {
  id     String @id @default(cuid())
  name   String
  effect String
  type   String
  order  Int
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("user")
    accounts      Account[]
    sessions      Session[]
    posts         Post[]    @relation("UserPosts")
    recipes       Recipe[]  @relation("UserRecipes")
    foundRecipes  UserRecipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}